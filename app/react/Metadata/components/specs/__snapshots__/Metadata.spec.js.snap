// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Metadata should not render an empty list 1`] = `<Fragment />`;

exports[`Metadata should not render metadata without value 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-label  "
    key="label_0"
  >
    <dt>
      Label
    </dt>
    <dd
      className=""
    >
      string value
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render a Geolocation viewer when the metadata is type geolocation 1`] = `
<Fragment>
  <dl
    className="metadata-type-geolocation metadata-name-geolocation_label  "
    key="geolocation_label_0"
  >
    <dt>
      Geolocation Label
    </dt>
    <dd
      className=""
    >
      <GeolocationViewer
        onlyForCards={true}
        points={
          Array [
            Object {
              "lat": 13,
              "lon": 7,
            },
          ]
        }
      />
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render a Markdown when the metadata is type mardown 1`] = `
<Fragment>
  <dl
    className="metadata-type-markdown metadata-name-label_array  "
    key="label_array_0"
  >
    <dt>
      label array
    </dt>
    <dd
      className=""
    >
      <MarkdownViewer
        compact={false}
        html={false}
        lists={Array []}
        markdown="some markdown text"
      />
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render a link 1`] = `
<Fragment>
  <dl
    className="metadata-type-link metadata-name-link  "
    key="link_0"
  >
    <dt>
      Link
    </dt>
    <dd
      className=""
    >
      <a
        href="url"
        rel="noopener noreferrer"
        target="_blank"
      >
        label
      </a>
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render a media field 1`] = `
<Fragment>
  <dl
    className="metadata-type-multimedia metadata-name-media_label  "
    key="media_label_0"
  >
    <dt>
      Media Label
    </dt>
    <dd
      className=""
    >
      <MarkdownViewer
        compact={true}
        html={false}
        lists={Array []}
        markdown="{media}(http://youtube.com/videoid)"
      />
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render an image field 1`] = `
<Fragment>
  <dl
    className="metadata-type-multimedia metadata-name-image_label  "
    key="image_label_0"
  >
    <dt>
      Image Label
    </dt>
    <dd
      className=""
    >
      <img
        alt="Image Label"
        className="multimedia-img cover"
        key="http://some.url.com/image.jpg"
        src="http://some.url.com/image.jpg"
      />
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render array values separated by ", " 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-label_array  "
    key="label_array_0"
  >
    <dt>
      label array
    </dt>
    <dd
      className=""
    >
      <ValueList
        compact={false}
        property={
          Object {
            "label": "label array",
            "name": "label_array",
            "translateContext": "oneTranslateContext",
            "value": Array [
              Object {
                "value": "first_value",
              },
              Object {
                "value": "second_value",
              },
            ],
          }
        }
      />
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render links when multiple properties have url 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-label_array  "
    key="label_array_0"
  >
    <dt>
      label array
    </dt>
    <dd
      className=""
    >
      <ValueList
        compact={false}
        property={
          Object {
            "label": "label array",
            "name": "label_array",
            "translateContext": "oneTranslateContext",
            "value": Array [
              Object {
                "value": <Connect(I18NLink)
                  to="url1"
                >
                  first_value
                </Connect(I18NLink)>,
              },
              Object {
                "value": <Connect(I18NLink)
                  to="url2"
                >
                  second_value
                </Connect(I18NLink)>,
              },
            ],
          }
        }
      />
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render links when the property has url 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-withurl  "
    key="withurl_0"
  >
    <dt>
      withUrl
    </dt>
    <dd
      className=""
    >
      <Connect(I18NLink)
        key="url"
        to="url"
      >
        string value
      </Connect(I18NLink)>
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render links with icons if propery has url and icon 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-withurl  "
    key="withurl_0"
  >
    <dt>
      withUrl
    </dt>
    <dd
      className=""
    >
      <Connect(I18NLink)
        key="url"
        to="url"
      >
        <Connect(Icon)
          className="item-icon"
          data={
            Object {
              "_id": "icon",
              "type": "Icons",
            }
          }
        />
        string value
      </Connect(I18NLink)>
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render property not have this item when type is null 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-metadata_without_property  "
    key="metadata_without_property_0"
  >
    <dt>
      metadata without property
    </dt>
    <dd
      className=""
    >
      No property
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render sorted property with sorted styles 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-sortedby  "
    key="sortedby_0"
  >
    <dt>
      sortedBy
    </dt>
    <dd
      className="item-current-sort"
    >
      string value
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata should render string values 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-label  "
    key="label_0"
  >
    <dt>
      Label
    </dt>
    <dd
      className=""
    >
      string value
    </dd>
  </dl>
</Fragment>
`;

exports[`Metadata when passing compact prop should pass it to ValueList 1`] = `
<Fragment>
  <dl
    className="metadata-type-default metadata-name-label_array  "
    key="label_array_0"
  >
    <dt>
      label array
    </dt>
    <dd
      className=""
    >
      <ValueList
        compact={true}
        property={
          Object {
            "label": "label array",
            "name": "label_array",
            "translateContext": "oneTranslateContext",
            "value": Array [
              Object {
                "value": <Connect(I18NLink)
                  to="url1"
                >
                  first_value
                </Connect(I18NLink)>,
              },
              Object {
                "value": <Connect(I18NLink)
                  to="url2"
                >
                  second_value
                </Connect(I18NLink)>,
              },
            ],
          }
        }
      />
    </dd>
  </dl>
</Fragment>
`;
