// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FiltersFromProperties should concat the modelPrefix with the model 1`] = `
<TextFilter
  label="textLabel"
  model=".filters.prefix.textFilter"
  onChange={[Function]}
/>
`;

exports[`FiltersFromProperties when type is date, multidate, multidaterange or daterange should render a date filter 1`] = `
Array [
  <DateFilter
    format="dateFormat"
    label="dateLabel"
    model=".filters.dateFilter"
    onChange={[Function]}
  />,
  <DateFilter
    format="dateFormat"
    label="daterangeLabel"
    model=".filters.daterange"
    onChange={[Function]}
  />,
  <DateFilter
    format="dateFormat"
    label="multidateLabel"
    model=".filters.multidate"
    onChange={[Function]}
  />,
  <DateFilter
    format="dateFormat"
    label="multidaterangeLabel"
    model=".filters.multidaterange"
    onChange={[Function]}
  />,
]
`;

exports[`FiltersFromProperties when type is nested should render a number range filter 1`] = `
<NestedFilter
  aggregations={
    Immutable.Map {
      "aggregations": "aggregations",
    }
  }
  label="nestedLabel"
  model=".filters.nestedFilter"
  onChange={[Function]}
  property={
    Object {
      "label": "nestedLabel",
      "name": "nestedFilter",
      "type": "nested",
    }
  }
/>
`;

exports[`FiltersFromProperties when type is numeric should render a number range filter 1`] = `
<NumberRangeFilter
  label="numericLabel"
  model=".filters.numericFilter"
  onChange={[Function]}
/>
`;

exports[`FiltersFromProperties when type is select, multiselect or relationship should render a select filter 1`] = `
Array [
  <SelectFilter
    label="selectLabel"
    lookup={[Function]}
    model=".filters.selectFilter"
    onChange={[Function]}
    options={
      Array [
        Object {
          "label": "option1",
        },
      ]
    }
    prefix="selectFilter"
    showBoolSwitch={false}
    sort={false}
    totalPossibleOptions={0}
  />,
  <SelectFilter
    label="multiselectLabel"
    lookup={[Function]}
    model=".filters.multiselectFilter"
    onChange={[Function]}
    options={
      Array [
        Object {
          "label": "option3",
        },
      ]
    }
    prefix="multiselectFilter"
    showBoolSwitch={true}
    sort={false}
    totalPossibleOptions={0}
  />,
  <SelectFilter
    label="relationshipLabel"
    lookup={[Function]}
    model=".filters.relationshipFilter"
    onChange={[Function]}
    options={
      Array [
        Object {
          "label": "option2",
        },
      ]
    }
    prefix="relationshipFilter"
    showBoolSwitch={true}
    sort={true}
    totalPossibleOptions={0}
  />,
]
`;

exports[`FiltersFromProperties when type is text should render a text filter 1`] = `
<TextFilter
  label="textLabel"
  model=".filters.textFilter"
  onChange={[Function]}
/>
`;
